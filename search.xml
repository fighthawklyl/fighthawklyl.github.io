<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/06/18/openssl-jiao-cha-bian-yi/"/>
      <url>/2022/06/18/openssl-jiao-cha-bian-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/18/curl-jiao-cha-bian-yi/"/>
      <url>/2022/06/18/curl-jiao-cha-bian-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iptables网络共享</title>
      <link href="/2022/04/13/iptables-wang-luo-gong-xiang/"/>
      <url>/2022/04/13/iptables-wang-luo-gong-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="实现在嵌入式平台内网共享"><a href="#实现在嵌入式平台内网共享" class="headerlink" title="实现在嵌入式平台内网共享"></a>实现在嵌入式平台内网共享</h2><p>A设备有外网<br>B设备无外网<br>使用iptables nat转发，实现A设备给B设备提供网络</p><h3 id="一、内核添加iptables选项支持"><a href="#一、内核添加iptables选项支持" class="headerlink" title="一、内核添加iptables选项支持"></a>一、内核添加iptables选项支持</h3><p>按照下图中选项配置内核iptables支持。<br><img "" class="lazyload placeholder" data-original="/photo/iptables/kernel_1.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"><br><img "" class="lazyload placeholder" data-original="/photo/iptables/kernel_2.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"><br><img "" class="lazyload placeholder" data-original="/photo/iptables/kernel_3.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></p><h3 id="二、iptables工具编译"><a href="#二、iptables工具编译" class="headerlink" title="二、iptables工具编译"></a>二、iptables工具编译</h3><p>示例中选择的时iptables1.6.2版本。(<a href="https://www.netfilter.org/">iptables源码下载</a>)</p><p><font color='red'> 注意：需要修改 configure文件中文件地址,否则使用时可能出现 “Fatal: can’t open lock file /run/xtables.lock: No such file or directory”报。<br>        旧：xt_lock_name=”/run/xtables.lock”<br>        新：xt_lock_name=”/mnt/mtd/xtables.lock”</font> </p><p>交叉编译命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure --prefix<span class="token operator">=</span>/home/lyl/SVN/iptables16 --host<span class="token operator">=</span>arm-ca9-linux <span class="token assign-left variable">CC</span><span class="token operator">=</span>arm-ca9-linux-uclibcgnueabihf-gcc  --disable-nftables<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>–prefix=/home/lyl/SVN/iptables16配置的是编译后的文件保存路径</p><p>CC=arm-ca9-linux-uclibcgnueabihf-gcc配置NT98321交叉编译器</p><p>–disable-nftables 去除该选项，不去除可能会存在如下报错</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">checking <span class="token keyword">for</span> libmnl<span class="token punctuation">..</span>. no*** Error: No suitable libmnl found. ***    Please <span class="token function">install</span> the <span class="token string">'libmnl'</span> package    Or consider --disable-nftables to skip    iptables-compat over nftables support.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、iptales-nat转发"><a href="#三、iptales-nat转发" class="headerlink" title="三、iptales nat转发"></a>三、iptales nat转发</h3><h4 id="1、配置环境变量"><a href="#1、配置环境变量" class="headerlink" title="1、配置环境变量"></a>1、配置环境变量</h4><p>将iptales编译完成的bin目录下文件打包倒usr/sbin文件目录下，将lib文件打包倒usr/lib目录下。添加环境变量。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">XTABLES_LIBDIR</span><span class="token operator">=</span>/usr/lib/xtables<span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span>/usr/local/lib:/usr/lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><font color='red'>如果没有给环境变量可能会导致iptables 一些操作命令无法正常使用，遇到过 –to-source 的报错</font> </p><h4 id="2、配置设备ip"><a href="#2、配置设备ip" class="headerlink" title="2、配置设备ip"></a>2、配置设备ip</h4><p>A设备：eth3为usb 4g模块上网，eth0有线网口,假设4g的ip为10.24.131.49<br>B设备：eth0有线网口</p><p>A设备ip配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netinit <span class="token number">192.168</span>.2.1 <span class="token number">255.255</span>.255.0 <span class="token number">192.168</span>.2.254<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>B设备ip配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netinit <span class="token number">192.168</span>.2.3 <span class="token number">255.255</span>.255.0 <span class="token number">192.168</span>.2.254<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://wangchujiang.com/linux-command/c/iptables.html#%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6">iptables命令使用详解</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 打开linux内核的nat转发功能</span><span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span> /proc/sys/net/ipv4/ip_forward<span class="token comment">#SNAT源地址转换，将来自B设备在这个ip范围内 192.168.2.2/24的地址转换为10.24.131.49</span>iptables -t nat -A POSTROUTING -s <span class="token number">192.168</span>.2.2/24 -o eth3 -j SNAT --to-source <span class="token number">10.24</span>.131.49或（4g 5gip可能会发生变化不固定，让系统自动获取ip）iptables -t nat -A POSTROUTING -s <span class="token number">192.168</span>.2.2/24  -o eth3 -j MASQUERADE<span class="token comment">#上网控制，允许192.168.2.1/24范围的ip访问网络</span>iptables -A FORWARD -s <span class="token number">192.168</span>.2.1/24 -j ACCEPT<span class="token comment">#在B设备</span><span class="token function">ping</span> <span class="token number">192.168</span>.2.1  （ping网关能通）<span class="token function">ping</span> www.baidu.com <span class="token punctuation">(</span>可能存在无法ping通，可能由于dns解析配置文件导致，检查配置该 /etc/resolv.cond 文件<span class="token punctuation">)</span><span class="token comment">#在A设备，遇到过无法ping通B设备，原因可能是路由表导致，输入route命令，查看路由表</span><span class="token comment">#中显示的默认网关，B设备默认网关应当是192.168.2.1（gateway）,（flags）UG。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> iptables </tag>
            
            <tag> linux </tag>
            
            <tag> 网络 </tag>
            
            <tag> 内网共享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链式队列</title>
      <link href="/2021/07/17/lian-shi-dui-lie/"/>
      <url>/2021/07/17/lian-shi-dui-lie/</url>
      
        <content type="html"><![CDATA[<h3 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h3><p>链式队列–使用链表模拟实现队列先进先出，主要由一个一个数据节点连接而成。下面代码封装了两种模式队列<br>一、更具入队出队改变队列长度，动态分配内存，以及节点内存大小也是动态更具需要分配<br>二、初始化为定长，节点空间固定大小，连接成环形队列。</p><span id="more"></span><h3 id="图解两种模式队列"><a href="#图解两种模式队列" class="headerlink" title="图解两种模式队列"></a>图解两种模式队列</h3><div class="tabs" id="tab-id"><ul class="nav-tabs"><li class="tab active"><a class="#tab-id-1">动态分配内存</a></li><li class="tab"><a class="#tab-id-2">固定内存环形队列</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-id-1"><p><img "" class="lazyload placeholder" data-original="/photo/queue/init1.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="初始化"><br><img "" class="lazyload placeholder" data-original="/photo/queue/push1.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="入队"><br><img "" class="lazyload placeholder" data-original="/photo/queue/pop1.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="出队"></p></div><div class="tab-pane" id="tab-id-2"><p><img "" class="lazyload placeholder" data-original="/photo/queue/init2.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="初始化"><br><img "" class="lazyload placeholder" data-original="/photo/queue/push2.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="入队"><br><img "" class="lazyload placeholder" data-original="/photo/queue/pop2.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="出队"></p></div></div></div><div class="tabs" id="tab-id"><ul class="nav-tabs"><li class="tab active"><a class="#tab-id-1">queue.h</a></li><li class="tab"><a class="#tab-id-2">queue.c</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-id-1"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__QUEUE_PUBLIC_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__QUEUE_PUBLIC_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span>  Type<span class="token punctuation">;</span><span class="token comment">//链表节点</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span>Type<span class="token operator">*</span> buff<span class="token punctuation">;</span><span class="token class-name">size_t</span> len<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Node<span class="token punctuation">;</span><span class="token comment">//链表</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">QueueList</span><span class="token punctuation">&#123;</span><span class="token class-name">pthread_mutex_t</span> mutex_lock<span class="token punctuation">;</span><span class="token comment">//互斥锁防止同时出队，和入队活着一个出队一个入队时出现不同步</span><span class="token class-name">size_t</span> res<span class="token punctuation">;</span><span class="token comment">//记录链表节点总个数</span><span class="token class-name">size_t</span> size<span class="token punctuation">;</span><span class="token comment">//记录每个节点buff空间大小</span>Node<span class="token operator">*</span> head<span class="token punctuation">;</span>Node<span class="token operator">*</span> tail<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>QueueList<span class="token punctuation">;</span><span class="token comment">//初始化链式队列</span><span class="token keyword">int</span> <span class="token function">queuelist_init</span><span class="token punctuation">(</span>QueueList<span class="token operator">*</span><span class="token operator">*</span> queue<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建节点</span>Node<span class="token operator">*</span> <span class="token function">node_create</span><span class="token punctuation">(</span>QueueList<span class="token operator">*</span> queue<span class="token punctuation">,</span>Type<span class="token operator">*</span> buff<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//队列为空</span><span class="token keyword">int</span> <span class="token function">is_qempty</span><span class="token punctuation">(</span>QueueList<span class="token operator">*</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//队列满</span><span class="token keyword">int</span> <span class="token function">is_qfull</span><span class="token punctuation">(</span>QueueList<span class="token operator">*</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//队列字符串个数</span><span class="token keyword">int</span> <span class="token function">queuelist_num</span><span class="token punctuation">(</span>QueueList<span class="token operator">*</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//入队(尾添加)</span><span class="token keyword">int</span> <span class="token function">Push_QueueList</span><span class="token punctuation">(</span>QueueList<span class="token operator">*</span> queue<span class="token punctuation">,</span>Type<span class="token operator">*</span> buff<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出队(头删除)</span><span class="token keyword">int</span> <span class="token function">Pop_QueueList</span><span class="token punctuation">(</span>QueueList<span class="token operator">*</span> queue<span class="token punctuation">,</span>Type<span class="token operator">*</span> buff<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空队列中数据</span><span class="token keyword">void</span> <span class="token function">clean_queuelist</span><span class="token punctuation">(</span>QueueList<span class="token operator">*</span> queue<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//销毁队列</span><span class="token keyword">int</span> <span class="token function">destroy_queuelist</span><span class="token punctuation">(</span>QueueList<span class="token operator">*</span><span class="token operator">*</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="tab-pane" id="tab-id-2"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"queue.h"</span></span><span class="token comment">//初始化链式队列，len，size 都为0创建变长队列，都不为0创建len长度，每个size大小的队列</span><span class="token keyword">int</span> <span class="token function">queuelist_init</span><span class="token punctuation">(</span>QueueList<span class="token operator">*</span><span class="token operator">*</span> queue<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> len <span class="token operator">&amp;&amp;</span> <span class="token number">0</span> <span class="token operator">==</span> size<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> <span class="token number">0</span> <span class="token operator">&lt;</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span>queue <span class="token operator">=</span> <span class="token punctuation">(</span>QueueList<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>QueueList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> <span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"failed while malloc &lt;queuelist>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>mutex_lock<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"failed while MutexCreate\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>queue <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> len <span class="token operator">&amp;&amp;</span> <span class="token number">0</span> <span class="token operator">==</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>size <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>size <span class="token operator">=</span> size<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Node<span class="token operator">*</span> node <span class="token operator">=</span> <span class="token function">node_create</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>head <span class="token operator">&amp;&amp;</span> <span class="token constant">NULL</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>tail<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>head <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>tail <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>tail<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>tail <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>tail<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>head<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>tail <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>head<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建节点 size == 0创建buff长度的节点，size> 0创建size长度的节点</span>Node<span class="token operator">*</span> <span class="token function">node_create</span><span class="token punctuation">(</span>QueueList<span class="token operator">*</span> queue<span class="token punctuation">,</span>Type<span class="token operator">*</span> buff<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Node<span class="token operator">*</span> node <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"failed while malloc &lt;node>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>node<span class="token operator">-></span>buff <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> queue<span class="token operator">-></span>size<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>Type<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>Type<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>queue<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>node<span class="token operator">-></span>len <span class="token operator">=</span> len<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token operator">-></span>size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">bzero</span><span class="token punctuation">(</span>node<span class="token operator">-></span>buff<span class="token punctuation">,</span>queue<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>node<span class="token operator">-></span>buff<span class="token punctuation">,</span>buff<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//队列为空</span><span class="token keyword">int</span> <span class="token function">is_qempty</span><span class="token punctuation">(</span>QueueList<span class="token operator">*</span> queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//perror("queue is NULLL\n");</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token operator">-></span>res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//队列满</span><span class="token keyword">int</span> <span class="token function">is_qfull</span><span class="token punctuation">(</span>QueueList<span class="token operator">*</span> queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"queue is NULL\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token operator">-></span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"queue type error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token operator">-></span>res <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> queue<span class="token operator">-></span>size <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> queue<span class="token operator">-></span>head <span class="token operator">==</span> queue<span class="token operator">-></span>tail <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//队列字符串个数</span><span class="token keyword">int</span> <span class="token function">queuelist_num</span><span class="token punctuation">(</span>QueueList<span class="token operator">*</span> queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"queue is NULL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> queue<span class="token operator">-></span>res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//入队(尾添加)</span><span class="token keyword">int</span> <span class="token function">Push_QueueList</span><span class="token punctuation">(</span>QueueList<span class="token operator">*</span> queue<span class="token punctuation">,</span>Type<span class="token operator">*</span> buff<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token operator">-></span>mutex_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"push fail,queue is NULL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token operator">-></span>mutex_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> buff<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"push fail,buff is NULL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token operator">-></span>mutex_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> queue<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Node<span class="token operator">*</span> node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>node <span class="token operator">=</span> <span class="token function">node_create</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span>buff<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token operator">-></span>mutex_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> queue<span class="token operator">-></span>head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>queue<span class="token operator">-></span>head <span class="token operator">=</span> node<span class="token punctuation">;</span>queue<span class="token operator">-></span>tail <span class="token operator">=</span> node<span class="token punctuation">;</span>queue<span class="token operator">-></span>res<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token operator">-></span>mutex_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>queue<span class="token operator">-></span>tail<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>queue<span class="token operator">-></span>tail <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token function">is_qfull</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"queue full\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token operator">-></span>mutex_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">></span> queue<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buff too larger!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>queue<span class="token operator">-></span>tail<span class="token operator">-></span>buff<span class="token punctuation">,</span>buff<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token operator">-></span>tail<span class="token operator">-></span>len <span class="token operator">=</span> len<span class="token punctuation">;</span>queue<span class="token operator">-></span>tail<span class="token operator">=</span>queue<span class="token operator">-></span>tail<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>queue<span class="token operator">-></span>res<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token operator">-></span>mutex_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//出队(头删除)</span><span class="token keyword">int</span> <span class="token function">Pop_QueueList</span><span class="token punctuation">(</span>QueueList<span class="token operator">*</span> queue<span class="token punctuation">,</span>Type<span class="token operator">*</span> buff<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token operator">-></span>mutex_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"pop fail,queue is NULL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token operator">-></span>mutex_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token function">is_qempty</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"pop fail,queue is empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token operator">-></span>mutex_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token operator">-></span>head<span class="token operator">-></span>len <span class="token operator">></span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buff is too samll!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token operator">-></span>mutex_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> size<span class="token operator">=</span>queue<span class="token operator">-></span>head<span class="token operator">-></span>len<span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span>queue<span class="token operator">-></span>head<span class="token operator">-></span>buff<span class="token punctuation">,</span>queue<span class="token operator">-></span>head<span class="token operator">-></span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>queue<span class="token operator">-></span>head<span class="token operator">-></span>buff<span class="token punctuation">,</span><span class="token number">0x0</span><span class="token punctuation">,</span>queue<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>Node<span class="token operator">*</span> node <span class="token operator">=</span> queue<span class="token operator">-></span>head<span class="token punctuation">;</span>queue<span class="token operator">-></span>head<span class="token operator">-></span>len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>queue<span class="token operator">-></span>head <span class="token operator">=</span> queue<span class="token operator">-></span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>queue<span class="token operator">-></span>res<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token operator">-></span>size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token operator">-></span>mutex_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> queue<span class="token operator">-></span>res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>queue<span class="token operator">-></span>tail<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">free</span><span class="token punctuation">(</span>node<span class="token operator">-></span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token operator">-></span>mutex_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">clean_queuelist</span><span class="token punctuation">(</span>QueueList<span class="token operator">*</span> queue<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Type buff<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_qempty</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Pop_QueueList</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span>buff<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//销毁队列</span><span class="token keyword">int</span> <span class="token function">destroy_queuelist</span><span class="token punctuation">(</span>QueueList<span class="token operator">*</span><span class="token operator">*</span> queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>mutex_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> <span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>mutex_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Node<span class="token operator">*</span> head_node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>head<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>head<span class="token punctuation">;</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Node<span class="token operator">*</span> temp <span class="token operator">=</span> node<span class="token punctuation">;</span>node <span class="token operator">=</span> node<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token operator">-></span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>res<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>head<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Node<span class="token operator">*</span> temp <span class="token operator">=</span> node<span class="token punctuation">;</span>node <span class="token operator">=</span> node<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token operator">-></span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>res<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>head_node <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">-></span>mutex_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列 </tag>
            
            <tag> 环型队列 </tag>
            
            <tag> 链式队列 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管脚复用</title>
      <link href="/2021/07/15/guan-jiao-jie-fu-yong/"/>
      <url>/2021/07/15/guan-jiao-jie-fu-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="管脚复用"><a href="#管脚复用" class="headerlink" title="管脚复用"></a>管脚复用</h3><p>管脚复用指一个引脚具有多种功能，可以在不同时刻使用不同的功能(时分复用)，需要通过配置寄存器来开关芯片外部引脚和内部引脚的连接。</p><span id="more"></span><h4 id="引脚内部情况"><a href="#引脚内部情况" class="headerlink" title="引脚内部情况"></a>引脚内部情况</h4><p><img "" class="lazyload placeholder" data-original="/photo/gpio/7.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></p><table>    <tr>        <td>引脚</td>         <td>寄存器值</td>        <td>引脚功能</td>   </tr>    <tr>        <td rowspan="3">PA1</td>            <td >0x00</td>         <td >GPIO</td>      </tr>    <tr>        <td >0x01</td>        <td >UART_RX</td>        </tr>        <tr>        <td >0x10</td>        <td >PWM</td>        </tr></table><h4 id="设置GPIO模式"><a href="#设置GPIO模式" class="headerlink" title="设置GPIO模式"></a>设置GPIO模式</h4><p>若要将PA1设置成GPIO模式<br>首先，需要查询手册找到PA1的寄存器地址，设地址为<font color='red'> 0x120F0218 </font><br>上表中的类似数据也可以在手册查找，GPIO功能寄存器要设置为0x00。可以直接设置该地址值为0x00。</p><p>有些芯片手册不会直接告诉该引脚的寄存器地址，会告诉你寄存器基地址，这时候要更具手册告诉的<font color='red'>基地址+偏移</font>去设置寄存器<br><img "" class="lazyload placeholder" data-original="/photo/gpio/8.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"><br><img "" class="lazyload placeholder" data-original="/photo/gpio/9.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"><br>可以看到寄存器基地址为<font color='red'> 0xFE030000 </font>，上图中的引脚要设置为GPIO_0_0使用，就要设置<font color='red'> 0xFE030000 + 0x20基地址偏移后地址上的值 </font>，图中 2..0 是表示该地址下第第0位到第2位，这三位上的数据表示该引脚的复用模式。<br>但是不能直接往<font color='red'> 0xFE030020 </font>地址设置0x0,这样设置会把其他位的值全部置0.<br>因此，先读取<font color='red'> 0xFE030020 </font>地址上的值，假设读出来的值是 0x26fea113。<br>我们要设置的是前面3位设置为0，第0位到第2位占了3位，要将其置0。111B = 0x7,在第0位开始，所以左移 0 位， (0x7 &lt;&lt; 0)。取反~(0x7)即其他位都为1，低3位变0，11111…..111000B。和0x26fea113 进行&amp;运算，就仅仅只会改变低三位的值。<br>0x26fea113 = 00100110111111101010000100010011B</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">0x26fea113</span><span class="token punctuation">;</span>val <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">0x7</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>得到 val =  0x26fea110<br>将0x26fea110写入寄存器就完成了设置该引脚复用为GPIO_0_0。</p><h4 id="设置X-I2S2-MCLK"><a href="#设置X-I2S2-MCLK" class="headerlink" title="设置X_I2S2_MCLK"></a>设置X_I2S2_MCLK</h4><p>那设置成X_I2S2_MCLK怎么设置呢？<br>设置该复用模式，需要将这寄存器上这三位设置为0x3 = 011B<br>分步来</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">0x26fea113</span><span class="token punctuation">;</span><span class="token comment">//将第三位置0，</span>val <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">0x1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//val = 0010 0110 1111 1110 1010 0001 0001 0011 &amp; 1111 1111 1111 1111 1111 1111 1111 1011</span><span class="token comment">//将第一位第二位置1</span>val <span class="token operator">|=</span> <span class="token number">0x3</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//val = 00100110111111101010000100010011 | 0x11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时得到的val = 0x26fea113;<br>将0x26fea113写入寄存器就完成了设置该引脚复用为X_I2S2_MCLK。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> Gpio </tag>
            
            <tag> 管脚复用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux用户态设置gpio</title>
      <link href="/2021/07/12/linux-yong-hu-tai-she-zhi-gpio/"/>
      <url>/2021/07/12/linux-yong-hu-tai-she-zhi-gpio/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux用户态设置GPIO"><a href="#Linux用户态设置GPIO" class="headerlink" title="Linux用户态设置GPIO"></a>Linux用户态设置GPIO</h2><p>当单独排查或调试某个引脚相关硬件时，如果直接运行app程序，通过代码修改一次运行一次会比较麻烦。<br>这个时候应当单独对该引脚调试，也可避免程序中可能存在未知的地方修改引脚。</p><span id="more"></span><h3 id="一、GPIO操作相关目录以及接口"><a href="#一、GPIO操作相关目录以及接口" class="headerlink" title="一、GPIO操作相关目录以及接口"></a>一、GPIO操作相关目录以及接口</h3><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><p>/sys/class/gpio/</p><h4 id="export"><a href="#export" class="headerlink" title="export"></a>export</h4><p>用于导出指定编号的引脚，用为GPIO直接使用</p><h4 id="unexport"><a href="#unexport" class="headerlink" title="unexport"></a>unexport</h4><p>删除导出的GPIO</p><h3 id="二、GPIO使用"><a href="#二、GPIO使用" class="headerlink" title="二、GPIO使用"></a>二、GPIO使用</h3><h4 id="进入-sys-class-gpio-目录"><a href="#进入-sys-class-gpio-目录" class="headerlink" title="进入/sys/class/gpio/目录"></a>进入/sys/class/gpio/目录</h4><p>终端输入:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /sys/class/gpio/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img "" class="lazyload placeholder" data-original="/photo/gpio/1.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></p><h4 id="添加GPIO"><a href="#添加GPIO" class="headerlink" title="添加GPIO"></a>添加GPIO</h4><p>终端输入: </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token number">30</span> <span class="token operator">></span> <span class="token builtin class-name">export</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img "" class="lazyload placeholder" data-original="/photo/gpio/2.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></p><p>可以发现目录下出现了一个gpio30，这就代表添加gpio成功了。如果执行后没有添加上，没反应或提示不能添加，表示该gpio已经被作为其他功能使用。</p><h4 id="操作GPIO"><a href="#操作GPIO" class="headerlink" title="操作GPIO"></a>操作GPIO</h4><p>终端输入:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> gpio30<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img "" class="lazyload placeholder" data-original="/photo/gpio/3.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></p><p>使用ls命令可以查看到进去后目录下的几个文件如上图。</p><h5 id="direction"><a href="#direction" class="headerlink" title="direction"></a>direction</h5><p>设置引脚输出输入方向<br>1、设置输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token keyword">in</span> <span class="token operator">></span> direction<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img "" class="lazyload placeholder" data-original="/photo/gpio/4.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"><br>检查是否设置成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> direction<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img "" class="lazyload placeholder" data-original="/photo/gpio/5.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"><br>显示为in，则设置输入方向成功</p><p>2、设置输出</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> out <span class="token operator">></span> direction<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查是否成功同上</p><h5 id="value"><a href="#value" class="headerlink" title="value"></a>value</h5><p>1、设置高电平</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span> value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color='red'> 注意 </font> :该设置操作必须要上面输出输入设置为输出才能设置</p><p><img "" class="lazyload placeholder" data-original="/photo/gpio/6.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"><br>如图，查询得知原来为低电平，value为0，设置后查询得知为1.设置成功。</p><p>2、设置低电平</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token number">0</span> <span class="token operator">></span> value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="note info"><p>当上述操作后如果，设置高电平应当是3.3V，测量电压却远低于3.3V，这个时候就需要直接操作寄存器来查看管脚复用情况，确认是否正确解复用为gpio模式</p></div><p>👇👇👇👇👇<br><a href="%5Cpublic%5C2021%5C07%5C15%5Cguan-jiao-jie-fu-yong">管脚复用</a><br><a href="">读写寄存器</a></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 嵌入式 </tag>
            
            <tag> Gpio </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
